#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('node_web_cluster:server');
var net = require('net');
var _ = require('underscore');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3333');

var child_process = require('child_process');
process.env.PORT = port;

var path = require('path');

function gain_worker() {
  return child_process.fork(
    path.join(__dirname,'./workers.js'),
    {
      env : process.env
    });
}

var worker = gain_worker();

/**
 * Create HTTP server.
 */

var server = net.createServer(function( c ) {
  worker.send({ 
    type   : 'socket'
  },c);
});

var restart_worker = _.debounce(function restart_worker () {
  debug('start restart');
  var new_worker = gain_worker();
  var once_startup = function( m ) {
    if( m.ready_stat == 4 ){
      worker.send({
        type : 'exit'
      });
      worker = new_worker;
      new_worker.removeListener('message',once_startup);
    }
  }
  new_worker.on('message',once_startup);
},300);

var fs = require('fs');
['../routes','../app.js']
  .map(function( p ) {
    return path.join(__dirname,p);
  })
  .forEach(function( p ) {
    fs.watch(p,{recursive:true},restart_worker);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
